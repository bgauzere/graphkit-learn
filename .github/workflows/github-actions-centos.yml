name: graphkit-learn

run-name: ${{ github.actor }} is testing graphkit-learn out GitHub Actions 🚀

on: [ push, pull_request ]

jobs:
  CI-CentOS:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10" ]
        container: [ "centos:7" ]

    container:
      image: ${{ matrix.container }}

    steps:
      - run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      - name: Check out repository code
        uses: actions/checkout@v3

      - run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."
      - run: echo "🖥️ The workflow is now ready to test your code on the runner."
      - run: echo "🪵 The root directory of the checked-out repository is $GITHUB_WORKSPACE."
      - name: List files in the repository
        run: |
          pwd
          ls /
          echo "The files contained in the repository (GITHUB_WORKSPACE):"
          ls $GITHUB_WORKSPACE
      - run: echo "🍏 This job's status is ${{ job.status }}."

      - name: Install system-level dependencies
        run: |
          #%% lsb-core is required for actions/setup-python@v4:
          echo "Installing redhat-lsb-core:"
          yum install -y redhat-lsb-core
          #%% Install a higher version of glibc: (The latest version on CentOS 7 
          #%% is 2.17, while at least 2.34 is required for the latest Python 3.8.)
          # Determine the current version of glibc that is installed:
          echo "Current version of glibc installed:"
          rpm -q glibc
          # Check if a newer version of glibc is available in the official CentOS 
          # repositories:
          echo "The latest version of glibc available on the current system:"
          yum list glibc
          # Installing it from a third-party repository such as the Fedora EPEL:
          echo "Installing Fedora EPEL:"
          yum install epel-release
          echo "Installing new version of glibc:"
          yum install glibc
          # Update the system's linker cache to include the new version of glibc:
          ldconfig
          # Verify that glibc has been installed:
          echp "The new version of glibc installed:"
          rpm -q glibc

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
#          cache: 'pip' # caching pip dependencies

      - name: Check installed Python and pip
        run: |
          python --version
          pip --version
          find / -name pip 2>/dev/null

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Cython pytest
          pip install codecov coverage pytest-cov
          sudo apt-get -y install gfortran liblapack-dev
          pip install -r requirements.txt
          pip install wheel

      - name: Build and test
        run: |
          python setup.py bdist_wheel
          pytest -v --cov-config=.coveragerc --cov-report term --cov=gklearn gklearn/tests/ged/
      #          pytest -v --cov-config=.coveragerc --cov-report term --cov=gklearn gklearn/tests/ --ignore=gklearn/tests/test_median_preimage_generator.py --ignore=gklearn/tests/test_graphkernels.py

      - name: Run code coverage
        run: |
          codecov

#      - name: Publish distribution 📦 to Test PyPI
#        if: matrix.python-version == '3.8' && matrix.os == 'ubuntu-latest'
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
#          repository-url: https://test.pypi.org/legacy/
#
#      - name: Publish distribution 📦 to PyPI
#        if: matrix.python-version == '3.8' && matrix.os == 'ubuntu-latest'
#        uses: pypa/gh-action-pypi-publish@release/v1
#        with:
#          user: __token__
#          password: ${{ secrets.PYPI_API_TOKEN }}